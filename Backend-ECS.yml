# Template adapted from https://github.com/nathanpeck/aws-cloudformation-fargate
AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Fargate Prisma stack.
Parameters:
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service

  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service

  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.

  VPC:
    Type: String
    Description: VPC ID


  Subnet1:
    Type: String
    Description: Subnet1 ID

  Subnet2:
    Type: String
    Description: Subnet2 ID

Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VPC

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref "FargateContainerSecurityGroup"
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref "FargateContainerSecurityGroup"
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "FargateContainerSecurityGroup"

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups: [!Ref "PublicLoadBalancerSG"]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 65 # 수치를 높여야 구동시간과 체크시간이 어긋나지 않는다.
      HealthCheckPath: /status # 백엔드일 경우 /status 경로에 Status 200을 반환해주는 내용을 추가해주어야 체크가 가능
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60 # 수치를 높여야 구동시간과 체크시간이 어긋나지 않는다.
      HealthyThresholdCount: 2
      Name: !Join ["-", [!Ref "AWS::StackName", "TG"]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
      TargetType: "ip"

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      LoadBalancerArn: !Ref "PublicLoadBalancer"
      Port: 80
      Protocol: HTTP

  Logs:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Ref "AWS::StackName"
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      RequiresCompatibilities:
        - FARGATE
      Family: !Ref 'ServiceName'
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Join ["-", [ !Ref ServiceName, "container" ]]
          # Essential: true
          Image: !Join [":", [!Ref ImageUrl, "latest"]]
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "AWS::StackName"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref 'ServiceName'

  Service:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref ServiceName
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Join ["-", [ !Ref ServiceName, "container" ]]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref PublicLoadBalancerSG
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref "ECSCluster"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ClusterName"]]

  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ["", ["http://", !GetAtt "PublicLoadBalancer.DNSName"]]
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ExternalUrl"]]

  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt "ECSRole.Arn"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ECSRole"]]

  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt "ECSTaskExecutionRole.Arn"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ECSTaskExecutionRole"]]

  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicListener"]]

  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref "FargateContainerSecurityGroup"
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "FargateContainerSecurityGroup"]]
